package com.vaibhav.lld.design.SchemaDesign.pen;

import com.vaibhav.lld.design.SchemaDesign.pen.constants.INK;
import com.vaibhav.lld.design.SchemaDesign.pen.constants.RefillType;
import com.vaibhav.lld.design.SchemaDesign.pen.impl.*;
import com.vaibhav.lld.design.SchemaDesign.pen.model.Nib;
import com.vaibhav.lld.design.SchemaDesign.pen.model.Refill;
import org.junit.Assert;
import org.junit.Test;

import static com.vaibhav.lld.design.SchemaDesign.pen.impl.GelPen.getGelPenBuilder;

public class PenTest {
    @Test
    public void createGelPen(){

     //   Pen gelPen=new GelPen("Parker",100.0,new SmoothWritingBehaviour(), INK.BLACK,nib,true);
       // gelPen.write();
        Pen gelPen= getGelPenBuilder()
                .name("parker")
                .nib(new Nib(2.0))
                .writingBehaviour(new SmoothWritingBehaviour())
                .ink(INK.RED).toBuild();
        gelPen.write();
        Assert.assertTrue("gEL REFILL IS THERE",RefillType.GELPENREFILL==((GelPen)gelPen).getRefill().getType());

    }
    @Test
    public void createBallPen(){
        Nib nib=new Nib(2.0);
        Pen ballPen=new BallPen("ButterFlow",150.20,new SmoothWritingBehaviour(),nib,INK.PINK,false);
        ballPen.write();
Assert.assertTrue("ball pen refill cannot be changed",((BallPen)ballPen).isRefillable()==false);
        Assert.assertTrue("ball REFILL IS THERE",RefillType.BALLPENREFILL==((BallPen)ballPen).getRefill().getType());

    }
    @Test
    public void createFountainPen(){
        Nib nib=new Nib(12.2);
        Pen fountainPen=new FountainPen("FTP",450.2,new RoughWritingBehaviour(),INK.RED,nib);
        fountainPen.write();
        ((FountainPen)fountainPen).fillInk(INK.RED);
        Assert.assertTrue("fountain pen refill cannot be changed",(INK.RED)==((FountainPen) fountainPen).getInk());

    }
// what are the issues?
    // object creation is complex-->(FACTORY)
    //subclasses are used to create object-->(BUILDER)
    //contd in readme

    @Test
    public void GelPenWithBuilderv1(){
        Pen pen= getGelPenBuilder().name("parker").nib(new Nib(2.0)).writingBehaviour(new SmoothWritingBehaviour())
                .ink(INK.RED).toBuild();
        pen.write();
        System.out.println(((GelPen)pen).getRefill().getInk());
        

    }

    @Test
    public void GelPenWithBuilderV2(){
        Pen pen= GelPenV2.getBuilder()
                .name("parker")
                .writingBehaviour(new SmoothWritingBehaviour())
                .refill(Refill.builder()
                        .ink(INK.PINK)
                        .type(RefillType.GELPENREFILL)
                        .nib(new Nib(2.0)).isRefillable(true).build())
                        //new Refill(new Nib(2.0),INK.PINK,RefillType.GELPENREFILL,true))
                .build();
        pen.write();
        Assert.assertTrue("ink is",INK.PINK==((GelPenV2)(pen)).getRefill().getInk());

        // System.out.println(((GelPenV2)pen));
        Refill refill=Refill.builder().nib(new Nib(5.0)).ink(INK.RED).isRefillable(true).type(RefillType.GELPENREFILL).build();
        ((GelPenV2)pen).changeRefill(refill);
        Assert.assertTrue("ink changed",INK.RED==((GelPenV2)(pen)).getRefill().getInk());
        Assert.assertTrue("nib changed",5.0==((GelPenV2)(pen)).getRefill().getNib().getRadius());
    }

    @Test(expected = IllegalArgumentException.class)
    public void GelPenWithBuilderV2WithRefillError1(){
        Pen pen= GelPenV2.getBuilder()
                .name("parker")
                .writingBehaviour(new SmoothWritingBehaviour())
                .refill(Refill.builder().build())
                //new Refill(new Nib(2.0),INK.PINK,RefillType.GELPENREFILL,true))
                .build();
        pen.write();
        // System.out.println(((GelPenV2)pen));
        Refill refill=Refill.builder().type(RefillType.GELPENREFILL).build();
        ((GelPenV2)pen).changeRefill(refill);
    }
}
